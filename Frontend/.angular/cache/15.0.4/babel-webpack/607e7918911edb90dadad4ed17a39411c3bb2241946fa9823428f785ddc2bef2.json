{"ast":null,"code":"import _asyncToGenerator from \"C:/react/00FULLSTACK MEAN assyment/Frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { firstValueFrom } from 'rxjs';\nimport { appConfig } from '../utils/app-config';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DataService {\n  constructor(http) {\n    this.http = http;\n  }\n  // Get all theaters:\n  getAllTheaters() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const observable = _this.http.get(appConfig.theatersUrl);\n      const theaters = yield firstValueFrom(observable);\n      return theaters;\n    })();\n  }\n  // Get movies by theater:\n  getMoviesByTheater(theaterId) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const observable = _this2.http.get(appConfig.moviesByTheaterUrl + theaterId);\n      const movies = yield firstValueFrom(observable);\n      return movies;\n    })();\n  }\n  // Add movie:\n  addMovie(movie) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const observable = _this3.http.post(appConfig.moviesUrl, movie);\n      yield firstValueFrom(observable);\n    })();\n  }\n  // Delete movie:\n  deleteMovie(movieId) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const observable = _this4.http.delete(appConfig.moviesUrl + movieId);\n      yield firstValueFrom(observable);\n    })();\n  }\n}\nDataService.ɵfac = function DataService_Factory(t) {\n  return new (t || DataService)(i0.ɵɵinject(i1.HttpClient));\n};\nDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DataService,\n  factory: DataService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAEA,SAASA,cAAc,QAAQ,MAAM;AAGrC,SAASC,SAAS,QAAQ,qBAAqB;;;AAK/C,OAAM,MAAOC,WAAW;EAEpBC,YAA2BC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;EAAgB;EAE/C;EACaC,cAAc;IAAA;IAAA;MACvB,MAAMC,UAAU,GAAG,KAAI,CAACF,IAAI,CAACG,GAAG,CAAiBN,SAAS,CAACO,WAAW,CAAC;MACvE,MAAMC,QAAQ,SAAST,cAAc,CAACM,UAAU,CAAC;MACjD,OAAOG,QAAQ;IAAC;EACpB;EAEA;EACaC,kBAAkB,CAACC,SAAiB;IAAA;IAAA;MAC7C,MAAML,UAAU,GAAG,MAAI,CAACF,IAAI,CAACG,GAAG,CAAeN,SAAS,CAACW,kBAAkB,GAAGD,SAAS,CAAC;MACxF,MAAME,MAAM,SAASb,cAAc,CAACM,UAAU,CAAC;MAC/C,OAAOO,MAAM;IAAC;EAClB;EAEA;EACaC,QAAQ,CAACC,KAAiB;IAAA;IAAA;MACnC,MAAMT,UAAU,GAAG,MAAI,CAACF,IAAI,CAACY,IAAI,CAAaf,SAAS,CAACgB,SAAS,EAAEF,KAAK,CAAC;MACzE,MAAMf,cAAc,CAACM,UAAU,CAAC;IAAC;EACrC;EAEA;EACaY,WAAW,CAACC,OAAe;IAAA;IAAA;MACpC,MAAMb,UAAU,GAAG,MAAI,CAACF,IAAI,CAACgB,MAAM,CAACnB,SAAS,CAACgB,SAAS,GAAGE,OAAO,CAAC;MAClE,MAAMnB,cAAc,CAACM,UAAU,CAAC;IAAC;EACrC;;AA5BSJ,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAmB,SAAXnB,WAAW;EAAAoB,YAFR;AAAM","names":["firstValueFrom","appConfig","DataService","constructor","http","getAllTheaters","observable","get","theatersUrl","theaters","getMoviesByTheater","theaterId","moviesByTheaterUrl","movies","addMovie","movie","post","moviesUrl","deleteMovie","movieId","delete","factory","providedIn"],"sourceRoot":"","sources":["C:\\react\\00FULLSTACK MEAN assyment\\Frontend\\src\\app\\services\\data.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { firstValueFrom } from 'rxjs';\nimport { MovieModel } from '../models/task-model';\nimport { TheaterModel } from '../models/costomer-model';\nimport { appConfig } from '../utils/app-config';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class DataService {\n\n    public constructor(private http: HttpClient) { }\n\n    // Get all theaters:\n    public async getAllTheaters(): Promise<TheaterModel[]> {\n        const observable = this.http.get<TheaterModel[]>(appConfig.theatersUrl);\n        const theaters = await firstValueFrom(observable);\n        return theaters;\n    }\n\n    // Get movies by theater:\n    public async getMoviesByTheater(theaterId: string): Promise<MovieModel[]> {\n        const observable = this.http.get<MovieModel[]>(appConfig.moviesByTheaterUrl + theaterId);\n        const movies = await firstValueFrom(observable);\n        return movies;\n    }\n\n    // Add movie:\n    public async addMovie(movie: MovieModel): Promise<void> {\n        const observable = this.http.post<MovieModel>(appConfig.moviesUrl, movie);\n        await firstValueFrom(observable);\n    }\n\n    // Delete movie:\n    public async deleteMovie(movieId: string): Promise<void> {\n        const observable = this.http.delete(appConfig.moviesUrl + movieId);\n        await firstValueFrom(observable);\n    }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}