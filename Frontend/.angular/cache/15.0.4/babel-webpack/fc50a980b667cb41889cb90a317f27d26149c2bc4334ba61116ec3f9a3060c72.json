{"ast":null,"code":"import _asyncToGenerator from \"C:/react/00FULLSTACK MEAN assyment/Frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { firstValueFrom } from 'rxjs';\nimport { appConfig } from '../utils/app-config';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DataService {\n  constructor(http) {\n    this.http = http;\n  }\n  // Get all tasks:\n  getAllTasks() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const observable = _this.http.get(appConfig.tasksUrl);\n      const tasks = yield firstValueFrom(observable);\n      return tasks;\n    })();\n  }\n  // Get movies by Costomer:\n  // public async getMoviesByCostomer(CostomerId: string): Promise<MovieModel[]> {\n  //     const observable = this.http.get<MovieModel[]>(appConfig.moviesByCostomerUrl + CostomerId);\n  //     const movies = await firstValueFrom(observable);\n  //     return movies;\n  // }\n  // Add movie:\n  // public async addMovie(movie: MovieModel): Promise<void> {\n  //     const observable = this.http.post<MovieModel>(appConfig.moviesUrl, movie);\n  //     await firstValueFrom(observable);\n  // }\n  // Delete movie:\n  deleteMovie(movieId) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const observable = _this2.http.delete(appConfig.moviesUrl + movieId);\n      yield firstValueFrom(observable);\n    })();\n  }\n}\nDataService.ɵfac = function DataService_Factory(t) {\n  return new (t || DataService)(i0.ɵɵinject(i1.HttpClient));\n};\nDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DataService,\n  factory: DataService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAEA,SAASA,cAAc,QAAQ,MAAM;AAGrC,SAASC,SAAS,QAAQ,qBAAqB;;;AAK/C,OAAM,MAAOC,WAAW;EAEpBC,YAA2BC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;EAAgB;EAE/C;EACaC,WAAW;IAAA;IAAA;MACpB,MAAMC,UAAU,GAAG,KAAI,CAACF,IAAI,CAACG,GAAG,CAAcN,SAAS,CAACO,QAAQ,CAAC;MACjE,MAAMC,KAAK,SAAST,cAAc,CAACM,UAAU,CAAC;MAC9C,OAAOG,KAAK;IAAC;EACjB;EAEA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EAEA;EACaC,WAAW,CAACC,OAAe;IAAA;IAAA;MACpC,MAAML,UAAU,GAAG,MAAI,CAACF,IAAI,CAACQ,MAAM,CAACX,SAAS,CAACY,SAAS,GAAGF,OAAO,CAAC;MAClE,MAAMX,cAAc,CAACM,UAAU,CAAC;IAAC;EACrC;;AA5BSJ,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAY,SAAXZ,WAAW;EAAAa,YAFR;AAAM","names":["firstValueFrom","appConfig","DataService","constructor","http","getAllTasks","observable","get","tasksUrl","tasks","deleteMovie","movieId","delete","moviesUrl","factory","providedIn"],"sourceRoot":"","sources":["C:\\react\\00FULLSTACK MEAN assyment\\Frontend\\src\\app\\services\\data.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { firstValueFrom } from 'rxjs';\nimport { TaskModel } from '../models/task-model';\nimport { CostomerModel } from '../models/costomer-model';\nimport { appConfig } from '../utils/app-config';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class DataService {\n\n    public constructor(private http: HttpClient) { }\n\n    // Get all tasks:\n    public async getAllTasks(): Promise<TaskModel[]> {\n        const observable = this.http.get<TaskModel[]>(appConfig.tasksUrl);\n        const tasks = await firstValueFrom(observable);\n        return tasks;\n    }\n\n    // Get movies by Costomer:\n    // public async getMoviesByCostomer(CostomerId: string): Promise<MovieModel[]> {\n    //     const observable = this.http.get<MovieModel[]>(appConfig.moviesByCostomerUrl + CostomerId);\n    //     const movies = await firstValueFrom(observable);\n    //     return movies;\n    // }\n\n    // Add movie:\n    // public async addMovie(movie: MovieModel): Promise<void> {\n    //     const observable = this.http.post<MovieModel>(appConfig.moviesUrl, movie);\n    //     await firstValueFrom(observable);\n    // }\n\n    // Delete movie:\n    public async deleteMovie(movieId: string): Promise<void> {\n        const observable = this.http.delete(appConfig.moviesUrl + movieId);\n        await firstValueFrom(observable);\n    }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}